import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchItems , addItem ,updateItem , deleteItem  } from './reviewAPI';

const initialState = {
  items: [],
  status: 'idle',
};

// typically used to make async requests.
export const fetchAsync = createAsyncThunk(
  'review/fetchItems',
  async ({id}) => {
    const response = await fetchItems(id);
    const data = await response.json()
    return data.review
  }
);


export const addAsync = createAsyncThunk(
  'review/addItems',
  async ({id,commentBody}) => {
    const response = await addItem(id ,commentBody);
    const data = await response.json();
    return data.data;
   
  }
);

export const updateAsync = createAsyncThunk(
  'review/updateItems',
  async ({id,commentBody} )  => {
    const response = await updateItem(id,commentBody);
    const data = await response.json();
    // return {id,commentBody}
    return data.data
    // The value we return becomes the `fulfilled` action payload
    // return response.data;
  }
);

export const deleteAsync = createAsyncThunk(
  'review/deleteItems',
  async ({itemId} )  => {
    const response = await deleteItem({itemId});
    const data = await response.json();
    return itemId
   
  }
);

export const reviewSlice = createSlice({
  name: 'review',
  initialState,
  reducers: {
   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.fulfilled , (state , action) =>{
        state.items = action.payload;
        
      })
      .addCase(addAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload)
        const index = state.items.findIndex((item)=>item.user._id.toString() ===action.payload.user.toString())
        if(index===-1){
          state.items.unshift(
            {user:{username:"gaurav",_id:action.payload.user},review:action.payload.review,rating:action.payload.rating,createdAt:action.payload.createdAt}
          )
        }else{
          state.items[index].review=action.payload.review
          state.items[index].rating=action.payload.rating
        }
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload.user)
        const index = state.items.findIndex((item)=>item.user._id.toString() ===action.payload.user.toString())
        
       
      })
      .addCase(deleteAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload)
        const index = state.items.findIndex((item)=>item.product.id.toString() ===action.payload.toString())
        console.log(index)
        state.items.splice(index,1);
      })
  },
});



export default reviewSlice.reducer;